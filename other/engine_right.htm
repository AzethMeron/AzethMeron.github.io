<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns="http://www.w3.org/TR/REC-html40">

<head>
	<LINK href=../other/styles.css rel=stylesheet type=text/css>
	<base target="annexe">
</head>
<script src=../other/scripts.js></script>
<body background="../images/intile.jpg" lang="pl-PL" dir="ltr">
<p align="center">
<a name=introduction></a><font face="Times New Roman CE"><b><font size=6>E</font><font size=5>NGINE</b></font></p>
<font size=2>There are some very useful documents, regarding universal tools provided by WoG 3.59 engine. Some for simple high-level scripters, some for low-level modders.<br>
<br><br>
<font size=4><b><a name=strings></a>NEW STRINGS SYNTAX</b></font><br>
For <b>UN:A#/9-11/$, UN:G0, UN:G1, UN:G2, SS:W,N,D, HT:, OB:H, HO:H, UN:K2, MP:S, QW:A</b> <br>
If you pass a string constant (^hi!^) or a z-string (global or local), the value is copied into internal buffer (you don't need to use up a z variable for each object which hint you change).
If you use get syntax for a string (?z1), it's set to the current value (even if the value wasn't customized). <br>
<br>
Additionally, most receivers that used to require z-var index (like UN:N, LD:L,T) now accepts any type of z-var, as well as constant ^^ strings. <br>
<br>
Usual syntax works the same:<br>
If you pass 0, the original value is restored.<br>
If you pass number, corresponding z-var is used and all changes made to z-var are reflected to the value. ERT strings are also supported.<br>
If you use get/check syntax with a number (?v1), z variable index is returned. 0 is returned if the value wasn't customized. Negative values are returned if the custom string is stored in internal buffer.<br>
<br>
Exceptions:<br>
1) UN:K2 doesn't retrieve a standard new week message.<br>
2) for QW:A you can pass -1 to restore original value, as before<br>
<br><br>
<font size=4><b><a name=memory></a>GET MEMORY ADDRESS</b></font><br>
New experimental parameters syntax to get memory address. Now you can use <b>d?</b> to get address of an integer value. This is useful when working with UN:C command. If a command doesn't support this, the value returned is 0. In Lua use <b>?ptr</b> for this.
<br>
Example:<br>
!#MA:P13/d?v1; [get Archangels hit points address in v1]<br>
!#IF:M^%V1^;<br>
<br>
You can use this to bypass some hardcoded boundaries, that are meant to make ERM more secure. For example, following lua script will allow you to edit base AI Weight, which is meant to be get-only<br>
<pre>AI.pre = function()
	local pointer = AI:M(?ptr,1)
	Message(AI:M(?v,1))
	UN:C(pointer,4,10)
	Message(AI:M(?v,1))
end</pre>
While this is generally bad idea - it is possible to do. d? syntax seems to properly distinguish local variables (that cannot be accessed) from global variables, so if you get address different than 0 it should work properly.<br>
<br><br>
<font size=4><b><a name=multiplayer></a>MULTIPLAYER SUPPORT</b></font><br>
Most scripts and vars are stored in savefile, so supporting multiplayer shouldn't be too much problematic. Although, for now, it isn't supported. <br>
<br>
Of course, with properly supported MP mode, you still need to make MP-compatible scripts. You can learn more about synchronization in <a href="tutor.htm" target=sommaire>ERM tutorials</a>, section 'Expert' <br>
<br>
For current time, playing via TCP with HD Mod (disabled HD+) causes "bad save file" error.<br>
Tests without HD Mod: managed to connect, but there was error after receiving savefile (player 2 day 1) and despite chosen heroes to start with level 5, player's hero had lvl1 while all heroes in tavern was 5-level. 
There were multiple script errors (ERM) mostly on host side. Game didn't crash and allowed to continue playing. Some of scripts worked properly. <br>
Further tests required. <br> 
<br><br>
<font size=4><b><a name=mods></a>MOD SUPPORT</b></font><br>
Scripts organisation:<br>
<b>Mods/ModName/Global</b> - Lua scripts loaded and executed at the start of the GAME, not the map. <br>
<b>Mods/ModName/Map</b> - Lua scripts loaded and executed when map is started, AND every time you load saved game. <br>
<b>Mods/ModName/Wogify</b> - Lua scripts that run ONLY when wogification is enabled<br>
<b>Mods/ModName/ERM</b> - ERM scripts loaded when map is started, only if wogification is enabled<br>
<b>Mods/ModName/Scripts</b> - Lua library scripts, to be loaded with "require". Those AREN't executed automatically<br>
To use Lua in global events of the map, place "ZVSL." at the beginning of event NAME. <br>
E.g. "ZVSL.Give Army". <br>
<br>
Because 'Global' scripts are parsed at game start, you can't use ERM triggers in here.(maybe you can within blocks like 'function global.events.EnterMap() end', not tested)
Note that scripts are loaded "ondemand", but LIST of all scripts is loaded at game start, so if you add brand new scriptfile you must restart the game.<br> 
<br>
All loaded scripts from Map, Wogify, Scripts and ERM folders are stored in savefile, together with their environment (variables etc.) Chosen "wog options" are saved too.
Script names cannot overlap EVEN IF in different catalogs. So, you can't have TEMP.lua in both Map and Wogify.<br>
<br>
Every mod has its own environment (including Options) and list of scripts, so mods can't overlap nor easily edit variables of others.<br>
<br>
Sequence Lua+ERM:<br>
1. Lua from 'Global' folder: function global.events.EnterMap() ... end<br>
2. Lua scripts from 'Map' folder<br>
3. Lua scripts from timed events<br>
4. ERM !# from timed events<br>
5. Lua from 'Wogify' folder<br>
6. ERM !# from 'ERM' folder<br>
and so on. Files .erm, .ert and .lua are (probably) loaded in alphabetical order<br>
<br>
Variable <b>'ModName'</b> stores name of mod. So, to reach folder 'Lods', you can use ModName.."/Lods/"<br>
"WoG Options" menu can be created by placing .txt file in Mods/ModName/Options folder. Name itself doesn't actually matters<br>
<br>
Let's call it 'Opt.txt'. Of course, we need to follow strict template inside this file.<br>
To seperate informations, <b>use tabs</b>.<br>
<br>
Header (copy-paste to 1st line): 
<pre>Name$	Text$	ERM	Value	On	NoMP	Cosmetic	Hint$	LongHint$	(comment)-</pre>
Literally, just copy-paste. It has to be there. <br>
All entries follows this template. Special cases are managed with different "Name" options.<br> 
Special "names": <br>
category:<br>
group:<br>
Enabled<br>
<br>
ERM section means WOG options: UN:P (i think, untested)<br>
Value means "value written to variable if given option is chosen". Can be anything, string, int, boolean.<br>
No idea for NoMP, Cosmetic,<br>
<br>
Following that, you have to attach Mod's display name and hint:
<pre>Enabled	Mod Display Name						Hint	LongHint?</pre>
Well now, you can place categories, groups and entries.
<pre>category:	Name of category
group:	Name of group</pre>
All now we have to do is add actual options, following template in Header. <br>
<br>
Here is example:
<pre>group:	Pick your poison. Trees i mean
Trees	Standard SoD trees		false			true	TODO: Proper text, hint and description
Trees	WoG trees		"wog"			true	Not included yet
Trees	Animated brighter trees and lakes		"move"			true	true	TODO: Proper text, hint and description</pre>
This creates group of 3 options. You can pick only one of them at one time.<br>
<b>You need to make scripts to have chosen options in mind</b>. Corelated example:<br>
<pre>function global.events.EnterMap()
    if Options.Trees == "move" then
        LD:T(?v, 11, ModName.."/Lods/TreeMove.lod")
    elseif Options.Trees == "wog" then
        LD:T(?v, 11, ModName.."/Lods/TreeWog.lod")
    end
end</pre>
<br>
<b>Options</b> is variable (table) storing chosen WoG options, declared in Opt.txt <br>
<br>
About <b>LODs</b>: currently there are 2, stored in /Data/ folder, h3wog.lod and h3std.lod. Those are loaded automatically at the very start of the game. If there is "h3custom.lod", it is loaded aswell.
Standard TXT files (like crtraits.txt) are parsed at game setup, so they can't be changed with <a href="../receivers/receiver_ld.htm" target=sommaire>LD receiver</a>.
Thus, if you want to override them, you must use h3wog, h3std or h3custom. Currently there are no custom LODs in /Mods/ directory to be loaded automatically.<br>
<br>
</font></font>
</body>

</html>
