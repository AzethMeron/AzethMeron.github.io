<html><head><LINK href=../other/styles.css rel=stylesheet type=text/css><base target=annexe></head>
<script src=../other/scripts.js></script>
<body background=../images/intile.jpg bgproperties=fixed>
<center><b><font face="Times New Roman CE"><font size=6>V<font size=5>ALUE</font><font size=5> SLOTS</font> (VA)<br>
<font face=Arial size=2><font color=#333333>RECEIVER</center>
<br>
Create slots for numerical and string variables, access them via names instead of index. <br>
Allows to store (virtually) unlimited data, and easily exchange data between Lua and ERM.<br>
<br>
Introduced in Alpha 8.2 <br>
</font></b><br><br>
<table border=2 bordercolorlight=#000000 bordercolordark=#000000 width="100%">
      <tr>
        <td nowrap valign=top><font class=ermtext>!!VA<font class=param>#</font>:<font class=param>XXXX</font>;</font>
        <td width=100% valign=top><b>Store data in named memory slots</b><br>
		&nbsp;&nbsp;&nbsp;&nbsp;<font class=param>#</font> - mode<br>
		&nbsp;&nbsp;&nbsp;&nbsp;<font class=param>#</font> = 0 slots are stored in savefile, and are local for map <br>
		&nbsp;&nbsp;&nbsp;&nbsp;<font class=param>#</font> = 1 slots are local for map, but not stored in savefile (temporary slots)<br>
		&nbsp;&nbsp;&nbsp;&nbsp;<font class=param>#</font> = 2 slots are stored in savefile, but are NOT local for map. <br>
		&nbsp;&nbsp;&nbsp;&nbsp;Prime functionality: passing values from one campaign map to another.<br>
		<br>
		<b>Comments</b><br>
		None of memory slots are transfered during combat in MP mode.<br>
		Slots in mode 2 are cleared ONLY when game is turned off.<br>
		Slots in mode 1 are cleared anytime map is started or loaded. In MP mode they are (probably) cleared every day! <br>
		</td>
<tr><td align=center colspan=2 class=rowforoptions><font face=Arial size=2><br><b>OPTIONS</b><br><br></font></td></tr>

  <tr>
    <td valign=top><a name="A"></a><font class=ermtext>A<font class=param>#</font>/<font class=param>$</font>;
    <td><b> Access data in slot</b><br>
	&nbsp;&nbsp;&nbsp;&nbsp;<font class=param>#</font> - name (z-var or constant string, up to 32 characters) <br>
	&nbsp;&nbsp;&nbsp;&nbsp;<font class=param>$</font> - get/set value in slot <br>
	Accessing slots that doesn't exist cause ERM error.

  <tr>
    <td valign=top><a name="C"></a><font class=ermtext>C<font class=param>#</font>/<font class=param>?$</font>;
    <td><b>Check whether slot exists</b><br>
	&nbsp;&nbsp;&nbsp;&nbsp;<font class=param>#</font> - name (z-var or constant string, up to 32 characters)<br>
	&nbsp;&nbsp;&nbsp;&nbsp;<font class=param>?$</font> - exist (1) or doesn't (0) 

  <tr>
    <td valign=top><a name="C"></a><font class=ermtext>C<font class=param>#</font>/<font class=param>?$1</font>/<font class=param>?$2</font>;
    <td><b>Check whether slot exists - extended syntax</b><br>
	&nbsp;&nbsp;&nbsp;&nbsp;<font class=param>#</font> - name (z-var or constant string, up to 32 characters)<br>
	&nbsp;&nbsp;&nbsp;&nbsp;<font class=param>?$1</font> - exist (1) or doesn't (0) <br>
	&nbsp;&nbsp;&nbsp;&nbsp;<font class=param>?$2</font> - type (0=v-var, 1=z-var, -1 if doesn't exist)
	
	<tr>
    <td valign=top><a name="E"></a><font class=ermtext>E<font class=param></font><font class=param></font>;
    <td><b>Remove ALL slots with given mode</b><br>
	Generally it is very bad idea, though might be useful with mode=2;
   
  <tr>
    <td valign=top><a name="I"></a><font class=ermtext>I<font class=param>#1</font>/<font class=param>#2</font>;
    <td><b>Initialise (create) slot</b><br>
	&nbsp;&nbsp;&nbsp;&nbsp;<font class=param>#1</font> - name (z-var or constant string, up to 32 characters)<br>
	&nbsp;&nbsp;&nbsp;&nbsp;<font class=param>#2</font> - type (0=v-var, 1=z-var)<br>
	<font class=bnotes>Comment</font>:<br>
	Creating slots that already exist (has same 'mode' and 'name') cause ERM error.
	
  <tr>
    <td valign=top><a name="R"></a><font class=ermtext>R<font class=param>#</font><font class=param></font>;
    <td><b>Remove slot with given name</b><br>
	&nbsp;&nbsp;&nbsp;&nbsp;<font class=param>#</font> - name (z-var or constant string, up to 32 characters)<br>
	Removing non-existant slot is ignored.
  
  </table><br><br>
  
  It's best to use "modular" naming convention, to prevent overlapping. For example, name "wog_name" would be WoG variable. Claimed variable "wog_" would mean that 'namespace' wog_ is claimed and can't be used, which can be useful for running multiple mods and checking whether they overlap.<br>
  You can use any string (up to 32 characters) as name, so you have some space for ya. Lettercase MATTERS.<br>
  <br>
  You can store numerical values in slot created with type=0. Those slots are 4 bytes integer, identical to v-vars. <br>
  Slot created with type=1 can store ERM strings. Like all z-variables, those are 512 characters long.<br>
  <br>
  Memory slots (VA Receiver) are cool, grants many new posibilities, but comes with handicap: they are SLOW. Because of that slowness, you should avoid accessing them in loops. 
  Best idea is to get value from slot into temporary variable (y-var), do some operations on this var, then write it into memory slot.<br>
  Example:<pre><font color=red>!?PI</font>;
<font color=purple>!!VA</font>0:A^%Z1_red^/?y1; 
... [do some operations here]
<font color=purple>!!VA</font>0:A^%Z1_red^/y1; 
</pre>
<br>
  Slots mode 2 are problematic because they can "wander" between saves. Created for passing values from one scenario to another, they are not cleared upon entering mew game, but are saved and loaded from savefile.  <br>
  Because of this, line <br>
  <pre><font color=yellow>!#VA</font>2:I^wog_temp^/0;</pre>
  will work fine first time map is started, but if you restart scenario, you will get ERM error.<br>
  <br>
  Furthemore, slot ^wog_temp^ will stay in memory after starting another game and will be stored in savefile of  this game. Potentially this can cause blobbing saves.<br>
  <br>
  During loading all overlapping VA2 slots are overriden with those stored in savefile.<br>
  
</body>

</html>
